package hexlet.code.schemas;import java.util.HashMap;import java.util.Map;public final class MapSchema extends BaseSchema {    private boolean sizeCheckActive = false;    private boolean shapeCheckActive = false;    private int minSize;    private HashMap<?, BaseSchema> scheme;    @Override    public MapSchema required() {        super.required();        return this;    }    @Override    public boolean isValid(Object inputData) {        boolean sizeCheck = !sizeCheckActive || ((Map<?, ?>) inputData).size() >= minSize;        boolean shapeCheck = !shapeCheckActive || ((Map<?, ?>) inputData).keySet()                .stream().allMatch(key -> {                    Object valueInputMap = ((Map<?, ?>) inputData).get(key);                    return scheme.get(key).isValid(valueInputMap);                });        boolean typeCheck = inputData instanceof Map<?, ?> || super.isValid(inputData);        return typeCheck && sizeCheck && shapeCheck;    }    public MapSchema sizeof(int inputSize) {        minSize = inputSize;        sizeCheckActive = true;        return this;    }    public MapSchema shape(Map<String, BaseSchema> inputSchema) {        shapeCheckActive = true;        scheme = new HashMap<>(inputSchema);        return this;    }}