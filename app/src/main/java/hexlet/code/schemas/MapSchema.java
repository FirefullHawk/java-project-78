package hexlet.code.schemas;import java.util.HashMap;import java.util.Map;import java.util.function.Predicate;public final class MapSchema extends BaseSchema {    @Override    public MapSchema required() {        super.required();        Predicate<Object> typeCheck =                inputDate -> inputDate instanceof Map<?, ?>;        addCheck(typeCheck);        return this;    }    @Override    public boolean isValid(Object inputData) {        return super.isValid(inputData);    }    public MapSchema sizeof(int inputSize) {        Predicate<Object> sizeof =                inputDate -> ((Map<?, ?>) inputDate).size() >= inputSize;        addCheck(sizeof);        return this;    }    public MapSchema shape(Map<String, BaseSchema> inputSchema) {        HashMap<?, BaseSchema> scheme = new HashMap<>(inputSchema);        Predicate<Object> shape =                inputDate -> ((Map<?, ?>) inputDate).keySet()                        .stream().allMatch(key -> {                            Object valueInputMap = ((Map<?, ?>) inputDate).get(key);                            return scheme.get(key).isValid(valueInputMap);                        });        addCheck(shape);        return this;    }}